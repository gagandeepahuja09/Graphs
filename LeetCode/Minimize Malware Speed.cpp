class Solution {
public:
    vector<int> parent;
    void uni(int x, int y) {
        parent[find(x)] = find(y);
    }
    
    int find(int x) {
        if(x != parent[x])
            parent[x] = find(parent[x]);
        return parent[x];
    }
    
    
    int minMalwareSpread(vector<vector<int>>& g, vector<int>& initial) {
        int n = g.size();
        for(int i = 0; i < n; i++)
            parent.push_back(i);
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                if(g[i][j])
                    uni(i, j);
            }
        }
        vector<int> area(n, 0), malware(n, 0);
        for(int i = 0; i < n; i++)
            area[find(i)]++;
        for(int i : initial) {
            malware[find(i)]++;
        }
        vector<int> ret = { 1, 0 };
        for(int i : initial) {
            ret = min(ret, { (malware[find(i)] == 1) * (-area[find(i)]), i });
        }
        return ret[1];
    }
};
